name: Deploy to Google Cloud Platform

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:  # Allow manual trigger

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: unpuzzle-app
  WEBSOCKET_SERVICE_NAME: unpuzzle-websocket
  ARTIFACT_REGISTRY: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/unpuzzle

jobs:
  setup-build-deploy:
    name: Setup, Build, and Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write  # For Workload Identity Federation

    steps:
      # Checkout code
      - name: Checkout
        uses: actions/checkout@v4

      # Authenticate to Google Cloud using Service Account Key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Configure Docker to use gcloud as credential helper
      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      # Build Next.js Docker image
      - name: Build Next.js Image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --build-arg NEXT_PUBLIC_SUPABASE_URL="${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" \
            --build-arg NEXT_PUBLIC_SUPABASE_ANON_KEY="${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" \
            --build-arg NEXT_PUBLIC_GROQ_API_KEY="${{ secrets.NEXT_PUBLIC_GROQ_API_KEY }}" \
            --build-arg NEXT_PUBLIC_APP_URL="${{ secrets.NEXT_PUBLIC_APP_URL }}" \
            --build-arg NEXT_PUBLIC_WEBSOCKET_URL="${{ secrets.NEXT_PUBLIC_WEBSOCKET_URL }}" \
            -f Dockerfile .

      # Build WebSocket Docker image
      - name: Build WebSocket Image
        run: |
          docker build -t ${{ env.ARTIFACT_REGISTRY }}/${{ env.WEBSOCKET_SERVICE_NAME }}:${{ github.sha }} \
            -f Dockerfile.websocket .

      # Push images to Artifact Registry
      - name: Push Images
        run: |
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ env.ARTIFACT_REGISTRY }}/${{ env.WEBSOCKET_SERVICE_NAME }}:${{ github.sha }}

      # Deploy Next.js to Cloud Run
      - name: Deploy Next.js to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --min-instances 1 \
            --max-instances 10 \
            --cpu 2 \
            --memory 2Gi \
            --timeout 60 \
            --set-env-vars "NODE_ENV=production" \
            --set-secrets "\
              SUPABASE_SERVICE_KEY=supabase-service-key:latest,\
              GROQ_API_KEY=groq-api-key:latest,\
              BACKBLAZE_APPLICATION_KEY_ID=backblaze-key-id:latest,\
              BACKBLAZE_APPLICATION_KEY=backblaze-key:latest,\
              CDN_AUTH_SECRET=cdn-auth-secret:latest"

      # Deploy WebSocket to Cloud Run
      - name: Deploy WebSocket to Cloud Run
        run: |
          gcloud run deploy ${{ env.WEBSOCKET_SERVICE_NAME }} \
            --image ${{ env.ARTIFACT_REGISTRY }}/${{ env.WEBSOCKET_SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 8080 \
            --min-instances 1 \
            --max-instances 5 \
            --cpu 1 \
            --memory 1Gi \
            --timeout 300 \
            --session-affinity \
            --set-env-vars "NODE_ENV=production"

      # Get service URLs
      - name: Get Service URLs
        run: |
          echo "::notice::Next.js App URL: $(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')"
          echo "::notice::WebSocket URL: $(gcloud run services describe ${{ env.WEBSOCKET_SERVICE_NAME }} --region ${{ env.REGION }} --format 'value(status.url)')"

      # Create deployment comment on PR (if PR)
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const appUrl = await exec.getExecOutput('gcloud', ['run', 'services', 'describe', '${{ env.SERVICE_NAME }}', '--region', '${{ env.REGION }}', '--format', 'value(status.url)']);
            const wsUrl = await exec.getExecOutput('gcloud', ['run', 'services', 'describe', '${{ env.WEBSOCKET_SERVICE_NAME }}', '--region', '${{ env.REGION }}', '--format', 'value(status.url)']);

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Deployment Successful!**\n\n- **App URL**: ${appUrl.stdout}\n- **WebSocket URL**: ${wsUrl.stdout}\n- **Commit**: ${context.sha}`
            })

  # Optional: Run tests before deployment
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true  # Continue even if linting fails

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_GROQ_API_KEY: ${{ secrets.NEXT_PUBLIC_GROQ_API_KEY }}
          NEXT_PUBLIC_APP_URL: ${{ secrets.NEXT_PUBLIC_APP_URL }}
          NEXT_PUBLIC_WEBSOCKET_URL: ${{ secrets.NEXT_PUBLIC_WEBSOCKET_URL }}

      # Add test command when you have tests
      # - name: Run tests
      #   run: npm test